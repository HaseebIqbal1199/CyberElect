# CyberElect - Technical Documentation
# Libraries and Implementation Details

## Standard Libraries Used

### 1. String Library (`<string>`)
**Purpose**: String manipulation and storage
- Used throughout the system for handling text data
- Stores user information, election details, and candidate data
- Enables parsing and formatting of text for display and storage
- Used in file operations for reading/writing data

### 2. Input/Output Stream Libraries (`<iostream>`, `<fstream>`, `<sstream>`)
**Purpose**: Input/output operations and file handling
- `<iostream>`: For console I/O (cin, cout)
- `<fstream>`: For file operations (reading/writing user and election data)
- `<sstream>`: For string stream operations (parsing date strings, formatting data)

**Key Applications**:
- User interface input/output through command line
- Storing election and user data in text files
- Parsing and validating date inputs

### 3. C Time Libraries (`<ctime>`)
**Purpose**: Date and time manipulation
- Retrieves system date and time
- Used for election time management
- Calculates time differences for election countdowns
- Validates date inputs

### 4. Standard Template Library - STL (`<vector>`, `<algorithm>`, etc.)
**Purpose**: Data structure and algorithm implementations
- Used for collections of elections, users, and candidates
- Sorting and searching capabilities
- Standard algorithms for data manipulation

### 5. Windows API (`<windows.h>`)
**Purpose**: Windows-specific functionality
- Console color manipulation through SetConsoleTextAttribute
- Setting console title through SetConsoleTitle
- Sleep function for animations and delays

## Custom Utility Functions and Implementation Details

### Time and Date Management

#### 1. Current Time and Date Retrieval

```cpp
// From timeUtils.cpp
std::string getCurrentTime() {
    time_t now = time(nullptr);
    tm* localTime = localtime(&now);
    
    std::stringstream ss;
    ss << std::setfill('0') << std::setw(2) << localTime->tm_hour << ":" 
       << std::setfill('0') << std::setw(2) << localTime->tm_min << ":" 
       << std::setfill('0') << std::setw(2) << localTime->tm_sec;
    
    return ss.str();
}

std::string getCurrentDate() {
    time_t now = time(nullptr);
    tm* localTime = localtime(&now);
    
    std::stringstream ss;
    ss << (localTime->tm_year + 1900) << "-" 
       << std::setfill('0') << std::setw(2) << (localTime->tm_mon + 1) << "-" 
       << std::setfill('0') << std::setw(2) << localTime->tm_mday;
    
    return ss.str();
}
```

**Implementation Details**:
- `time(nullptr)` gets the current calendar time as Unix timestamp
- `localtime()` converts to local time representation 
- `tm` structure fields are used to format time and date:
  - `tm_year` + 1900 = current year
  - `tm_mon` + 1 = current month (0-11 range converted to 1-12)
  - `tm_mday` = current day of month
  - `tm_hour` = current hour (0-23)
  - `tm_min` = current minute (0-59)
  - `tm_sec` = current second (0-59)
- `std::setfill` and `std::setw` ensure proper formatting with leading zeros

#### 2. Remaining Time Calculation

```cpp
// From timeUtils.cpp
RemainingTime calculateRemainingTime(const std::string& endDate) {
    // Parse the end date (YYYY-MM-DD format)
    int endYear, endMonth, endDay;
    char dash1, dash2;
    std::stringstream ss(endDate);
    ss >> endYear >> dash1 >> endMonth >> dash2 >> endDay;
    
    // Get current time
    time_t now = time(nullptr);
    tm* localTime = localtime(&now);
    int currentYear = localTime->tm_year + 1900;
    int currentMonth = localTime->tm_mon + 1;
    int currentDay = localTime->tm_mday;
    int currentHour = localTime->tm_hour;
    int currentMinute = localTime->tm_min;
    int currentSecond = localTime->tm_sec;
    
    // Calculate time difference...
    // [Complex calculation logic follows]
    
    RemainingTime result;
    result.hours = totalHours;
    result.minutes = totalMinutes;
    result.seconds = totalSeconds;
    return result;
}
```

**Implementation Details**:
- Parses the end date string using stringstream
- Calculates days between current date and end date
- Accounts for leap years in calculations
- Handles different month lengths
- Returns a RemainingTime struct with hours, minutes, and seconds

#### 3. Age Calculation

```cpp
// From main.cpp
int calculateAge(const string& dateOfBirth) {
    // Parse DOB
    int birthYear, birthMonth, birthDay;
    char dash1, dash2;
    stringstream ss(dateOfBirth);
    ss >> birthYear >> dash1 >> birthMonth >> dash2 >> birthDay;
    
    // Get current date
    time_t now = time(nullptr);
    tm* localTime = localtime(&now);
    int currentYear = localTime->tm_year + 1900;
    int currentMonth = localTime->tm_mon + 1;
    int currentDay = localTime->tm_mday;
    
    // Calculate age
    int age = currentYear - birthYear;
    
    // Adjust if birthday hasn't occurred yet this year
    if (currentMonth < birthMonth || (currentMonth == birthMonth && currentDay < birthDay)) {
        age--;
    }
    
    return age;
}
```

**Implementation Details**:
- Parses the date of birth string
- Compares with current date to calculate age in years
- Adjusts calculation if birthday hasn't occurred yet in current year

### File Operations and Data Persistence

#### 1. File-based Storage Structure

```
data/
├── elections/    # Election data storage
│   └── entries.txt   # Single file with all elections
└── Users/        # User data storage
    └── Creds.txt     # Single file with all user credentials
```

**Implementation Details**:
- Each data type (users, elections) has a dedicated subdirectory
- Data is stored in a single file per type for simplicity
- Data format is structured text with delimiters

#### 2. Data Saving Example

```cpp
// From Election.cpp
void Election::saveToFile() {
    ofstream file;
    file.open("data/elections/" + electionId + ".txt", ios::out);
    
    if (file.is_open()) {
        file << electionId << endl;
        file << electionName << endl;
        file << startDate << endl;
        file << endDate << endl;
        file << isActive << endl;
        file << candidateCount << endl;
        
        for (int i = 0; i < candidateCount; i++) {
            file << candidates[i]->getCandidateId() << endl;
            file << candidates[i]->getName() << endl;
            file << candidates[i]->getPartyAffiliation() << endl;
            file << candidates[i]->getVoteCount() << endl;
        }
        
        file.close();
    }
}
```

**Implementation Details**:
- Uses standard file streams for persistence
- Each object is responsible for its own serialization
- Field values are stored one per line for simplicity
- Collections (arrays) are prefixed with count indicators

### User Interface Implementation

#### 1. Console Color Management

```cpp
// From main.cpp
enum Color {
    BLACK = 0,
    BLUE = 1,
    GREEN = 2,
    CYAN = 3,
    RED = 4,
    MAGENTA = 5,
    BROWN = 6,
    LIGHTGRAY = 7,
    DARKGRAY = 8,
    LIGHTBLUE = 9,
    LIGHTGREEN = 10,
    LIGHTCYAN = 11,
    LIGHTRED = 12,
    LIGHTMAGENTA = 13,
    YELLOW = 14,
    WHITE = 15
};

void setColor(int textColor, int bgColor = BLACK) {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, textColor + (bgColor * 16));
}

void resetColor() {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, WHITE);
}
```

**Implementation Details**:
- Uses Windows API for console text attributes
- Supports both foreground and background colors
- Encapsulates Windows-specific code for better readability
- Reset function returns to default (white text)

#### 2. Text Formatting and Layout

```cpp
// From main.cpp
void printCentered(const string& text, int width = 80) {
    int spaces = (width - text.length()) / 2;
    if (spaces > 0) {
        cout << string(spaces, ' ');
    }
    cout << text << endl;
}

void displaySeparator(char symbol = '=', int width = 80, Color color = CYAN) {
    setColor(color);
    cout << string(width, symbol) << endl;
    resetColor();
}
```

**Implementation Details**:
- Centers text in console window for better appearance
- Parameterized separator lines with customizable style and color
- Consistent visual style across application

### Validation and Error Handling

#### 1. Input Validation

```cpp
// From main.cpp
int getValidatedInt(const string& prompt, int min, int max) {
    int input;
    bool validInput = false;
    
    while (!validInput) {
        cout << prompt;
        string inputStr;
        getline(cin, inputStr);
        
        stringstream ss(inputStr);
        if (ss >> input && ss.eof() && input >= min && input <= max) {
            validInput = true;
        } else {
            setColor(LIGHTRED);
            cout << " [!] Please enter a valid number between " << min << " and " << max << "." << endl;
            resetColor();
        }
    }
    
    return input;
}
```

**Implementation Details**:
- Uses string input and stringstream for robust validation
- Checks for numeric value within specified range
- Provides friendly error message with color highlighting
- Loops until valid input is provided

#### 2. Date Validation

```cpp
// From main.cpp
bool isValidDate(const string& date) {
    // Check format YYYY-MM-DD
    if (date.length() != 10 || date[4] != '-' || date[7] != '-') {
        return false;
    }
    
    // Check if all characters except hyphens are digits
    for (int i = 0; i < 10; i++) {
        if (i != 4 && i != 7 && !isdigit(date[i])) {
            return false;
        }
    }
    
    // Parse the date
    int year, month, day;
    char dash1, dash2;
    stringstream ss(date);
    ss >> year >> dash1 >> month >> dash2 >> day;
    
    // Validate ranges
    if (year < 1900 || year > 2100 || month < 1 || month > 12 || day < 1 || day > 31) {
        return false;
    }
    
    // Validate days in month
    int daysInMonth[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    
    // Adjust for leap year
    if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
        daysInMonth[2] = 29;
    }
    
    return day <= daysInMonth[month];
}
```

**Implementation Details**:
- Format validation with length and separator checks
- Character-by-character validation for digits
- Proper parsing of year, month, day components
- Range validation for reasonable date values
- Month-specific day validation with leap year handling

## Object-Oriented Programming Concepts Utilized

### 1. Inheritance Hierarchy

**User System Hierarchy**:
```
User (Abstract Base Class)
├── Voter
└── Administrator
```

**Election System Hierarchy**:
```
Election (Abstract Base Class)
├── LocalElection
├── RegionalElection
└── NationalElection
```

**Implementation Details**:
- Uses pure virtual functions to enforce implementation by derived classes
- Protected access for base class members that need inheritance access
- Override notation for clear documentation of polymorphic methods

### 2. Polymorphism

**Examples**:
- `Election::calculateResults()` - Different implementation per election type
- `User::login()` - Specialized login behavior by user type
- `Election::getType()` - Type identification for each derived class

**Implementation Details**:
- Virtual function dispatching to appropriate derived class implementation
- Runtime type determination for election and user objects
- Type-specific behavior while maintaining uniform interface

### 3. Encapsulation

**Examples**:
- Private member variables with public getters/setters
- Internal implementation details hidden from client code
- Safe access to object state through controlled interfaces

**Implementation Details**:
- Careful access level specification (private, protected, public)
- Validation within setter methods
- Internal maintenance of object invariants

### 4. Composition and Aggregation

**Examples**:
- `Election` contains `Candidate` objects
- `ElectionManager` manages collection of `Election` objects
- `VotingSystem` contains `ElectionManager` and references `User`

**Implementation Details**:
- Clear ownership semantics for contained objects
- Proper memory management for dynamically allocated components
- Logical organization of system components

## Design Patterns Utilized

### 1. Singleton (Partial Implementation)

**Example**: `VotingSystem` as the centralized system manager

**Implementation Details**:
- Central manager for subsystems
- Avoids multiple instances of key managers
- Facilitates access to key functionalities

### 2. Factory Method (Implicit)

**Example**: `ElectionManager::createElection()` creating different election types

**Implementation Details**:
- Creates appropriate election subtype based on type parameter
- Encapsulates object creation details
- Provides common interface for creating varied objects

### 3. Command Pattern (Partial Implementation)

**Example**: Menu command handling in main.cpp

**Implementation Details**:
- Encapsulates user requests as discrete operations
- Maps user inputs to specific system actions
- Organizes user interactions in a structured manner

## Conclusion

The CyberElect system leverages standard C++ libraries along with Windows-specific APIs to create a robust voting system. Key technical aspects include sophisticated time calculations, data persistence through file management, and a clean console-based user interface. The system architecture follows object-oriented design principles with a strong emphasis on inheritance hierarchies, polymorphism, and encapsulation.

The modular design and clear separation of concerns allow for maintainability and future enhancements. Time management is a crucial aspect of the system, with careful implementation of date parsing, age calculation, and countdown timers for elections.
